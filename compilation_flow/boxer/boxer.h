/* -----------------------------------------------------------------------------
 * Author list (in alphabetic order):
 * 
 *        Eduardo Qui√±ones <eduardo.quinones@bsc.es>
 *        Sara Royuela <sara.royuela@bsc.es>
 *        Roberto Vargas <roberto.vargas@bsc.es>
 * 
 * -----------------------------------------------------------------------------
 * (C) Copyright 2016 Barcelona Supercomputing Center
 * 
 * This file is part of boxer (Compilation flow) of the P-SOCRATES project.
 *
 * Boxer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published 
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Boxer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with boxer. If not, see <http://www.gnu.org/licenses/>.
 * -----------------------------------------------------------------------------
 */

#ifndef BOXER_H_
#define BOXER_H_

#define MAXTOKEN 1000

/*
 * Upper bit is used for autogenerated ids
 */
#define AUXID(id) ((id) | 1 << 31)
#define TREEID(type, tdg, id) ((type) << 28 | (tdg) << 20 | (id))

/*
  * A struct that is inserted in the tree has the id in the first field
  * of the struct, and it must be unsigned long pointer, so
  * OBJ2ID hides this implementation.
  */
#define OBJ2ID(x) (*(unsigned long *) (x))

enum {
	TYPTASK, TYPBOX, TYPDEP, TYPVAR
};

enum {
	NTASK = 'T', NWAIT='W', NBARRIER='B'
};

enum {
	TBOX, EBOX, LBOX, CBOX, SBOX
};

struct order {
	unsigned *vec;
	unsigned nr;
};

struct box;
struct task;
struct var;
struct expr;
struct values;
struct value;

extern void reset_task_globals(void);

extern void die(char *fmt, ...);
extern void *xmalloc(size_t len);
extern void *xcalloc(size_t nelem, size_t size);
extern void *xrealloc(void *p, size_t len);
extern char *xstrdup(char *s);

extern int initjsonfile(char *name);
extern struct box *readtdgjson(char *name);

extern void *lookup(unsigned long id);
extern void *install(unsigned long *id);
extern unsigned long newid(void);
extern void killnode(unsigned long id);

extern struct box *newbox(unsigned long id,
                          int type, char *locus,
                          struct expr *e);
extern struct box *addtask(struct box *box, struct task *task);
extern struct box *addchild(struct box *parent, struct box *box);
extern struct box *getnchild(struct box *box, unsigned n);
extern int expandbox(struct box *root);
extern int cmporder(struct order *o1, struct order *o2);
extern struct box *enumerate(struct box *this);
extern unsigned long order2hash(unsigned long id, struct order *order);
extern char *order2str(struct order *order, int loops);

extern int delempty(struct box *box);
extern int collapsebox(struct box *box);
extern struct task *newtask(unsigned id, int type, char *locus);
extern struct task *duptask(struct task *task);
extern void killtask(struct task *task);
extern void newdep(struct expr *e, unsigned long src, unsigned long dst);
extern void genleafs(void);
extern void expanddep(void);
extern void taskexpr(struct task *task, struct expr *expr);

extern struct var *newvar(unsigned long id, char *name,
                          char *locus, char *type);
extern struct values *newvalue(struct values *vals,
                               struct var *var, char *desc, int side);
extern struct expr *newexpr(char *expr, struct values *values);
extern void killexpr(struct expr *exp);
extern struct expr *negate(struct expr *e);
extern void initeval(void);
extern int evalable(struct expr *e);
extern int definevalue(struct expr *e, struct value *v);
extern struct values *nextiter(struct expr *e,
                               struct values *curvec,
                               unsigned n);
extern void forallvalues(struct values *v,
                         void *par, void (*fun)(void *, void *));
extern struct expr *dupexpr(struct expr *e);
extern int evalcond(struct expr *e);
extern int evalcond2(struct expr *e,
                     struct expr *src, struct expr *dst);
extern void normalizedep(struct expr *e,
                         struct expr *src, struct expr *dst);
extern char *getexpr(struct expr *e);
#endif
