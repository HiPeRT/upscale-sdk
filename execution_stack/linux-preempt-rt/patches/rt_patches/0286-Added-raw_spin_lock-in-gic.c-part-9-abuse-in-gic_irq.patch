From 22a2433eba76187067063ab49215181f62113e80 Mon Sep 17 00:00:00 2001
From: Bruno Morelli <b.morelli@evidence.eu.com>
Date: Sun, 5 Jun 2016 15:13:33 +0200
Subject: [PATCH 286/311] Added raw_spin_lock in gic.c (part 9) (abuse? in
 gic_irq_enable gic_irq_disable gic_unmask_irq gic_set_type)

---
 arch/k1/kernel/gic.c | 26 ++++++++++++++++++++++----
 1 file changed, 22 insertions(+), 4 deletions(-)

diff --git a/arch/k1/kernel/gic.c b/arch/k1/kernel/gic.c
index 5c4291d..be84955 100644
--- a/arch/k1/kernel/gic.c
+++ b/arch/k1/kernel/gic.c
@@ -22,7 +22,7 @@
 
 #include <HAL/hal/hal.h>
 
-static DEFINE_SPINLOCK(gic_lock);
+static DEFINE_RAW_SPINLOCK(gic_lock);
 
 /**
  * internal mapping of the input the outputs of the GIC
@@ -54,7 +54,7 @@ int gic_map_input_to_output(unsigned int input, unsigned int output)
 		return -EINVAL;
 
 	/* synchronize the access to the mapping */
-	spin_lock_irqsave(&gic_lock, flags);
+	raw_spin_lock_irqsave(&gic_lock, flags);
 
 	old_output = gic_input_to_output[input];
 	gic_input_to_output[input] = output;
@@ -66,7 +66,7 @@ int gic_map_input_to_output(unsigned int input, unsigned int output)
 	mppa_gic_configure_output_irq(output,
 					  MPPA_GIC_IRQ_TYPE_RISING_EDGE);
 
-	spin_unlock_irqrestore(&gic_lock, flags);
+	raw_spin_unlock_irqrestore(&gic_lock, flags);
 
 	return 0;
 }
@@ -115,6 +115,7 @@ static void gic_irq_enable(struct irq_data *d)
 {
 	unsigned int irq = d->irq - GIC_IRQ_BASE;
 
+	raw_spin_lock(&gic_lock);
 	/* clear a probably pending interupt */
 	mppa_gic_confirm_irq(irq, smp_processor_id(),
 				 gic_input_to_output[irq]);
@@ -128,6 +129,7 @@ static void gic_irq_enable(struct irq_data *d)
 	 * calling enable */
 	mppa_gic_enable_input_irq(irq);
 	mppa_gic_enable_output_irq(gic_input_to_output[irq]);
+	raw_spin_unlock(&gic_lock);
 }
 
 static void gic_irq_disable(struct irq_data *d)
@@ -135,6 +137,7 @@ static void gic_irq_disable(struct irq_data *d)
 	unsigned int irq = d->irq - GIC_IRQ_BASE;
 	u64 inputs, enabled_inputs;
 
+	raw_spin_lock(&gic_lock);
 	/* disable input */
 	mppa_gic_disable_input_irq(irq);
 
@@ -148,38 +151,47 @@ static void gic_irq_disable(struct irq_data *d)
 	if (inputs == (1 << irq)) {
 		mppa_gic_disable_output_irq(gic_input_to_output[irq]);
 	}
+	raw_spin_unlock(&gic_lock);
 }
 
 static void gic_irq_ack(struct irq_data *d)
 {
 	unsigned int irq = d->irq - GIC_IRQ_BASE;
 
+	raw_spin_lock(&gic_lock);
 	mppa_gic_clear_output_irq(gic_input_to_output[irq]);
 	mppa_gic_clear_input_irq(irq);
+	raw_spin_unlock(&gic_lock);
 }
 
 static void gic_mask_irq(struct irq_data *d)
 {
 	unsigned int irq = d->irq - GIC_IRQ_BASE;
 
+	raw_spin_lock(&gic_lock);
 	mppa_gic_disable_input_irq(irq);
+	raw_spin_unlock(&gic_lock);
 }
 
 static void gic_mask_ack_irq(struct irq_data *d)
 {
 	unsigned int irq = d->irq - GIC_IRQ_BASE;
 
+	raw_spin_lock(&gic_lock);
 	mppa_gic_disable_input_irq(irq);
 	mppa_gic_clear_input_irq(irq);
 	mppa_gic_clear_output_irq(gic_input_to_output[irq]);
+	raw_spin_unlock(&gic_lock);
 }
 
 static void gic_unmask_irq(struct irq_data *d)
 {
 	unsigned int irq = d->irq - GIC_IRQ_BASE;
 
+	raw_spin_lock(&gic_lock);
 	mppa_gic_enable_input_irq(irq);
 	mppa_gic_enable_output_irq(gic_input_to_output[irq]);
+	raw_spin_unlock(&gic_lock);
 }
 
 #ifdef CONFIG_SMP
@@ -200,7 +212,13 @@ static int gic_set_affinity(struct irq_data *d, const struct cpumask *cpumask,
 
 static int gic_set_type(struct irq_data *data, unsigned int flow_type)
 {
-	return irq_setup_alt_chip(data, flow_type);
+	int ret;
+
+	raw_spin_lock(&gic_lock);
+	ret = irq_setup_alt_chip(data, flow_type);
+	raw_spin_unlock(&gic_lock);
+
+	return ret;
 }
 
 static struct irq_chip gic_irq_controller = {
-- 
1.8.3.1

